# -*- coding: utf-8 -*-
"""P2_ap3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gXycQf5doVNQfV3CwARLbbYKYqm_9keZ
"""

# -*- coding: utf-8 -*-

#########################################################################
################### OBTENER LA BASE DE DATOS ############################
#########################################################################

# Descargar las imágenes de http://www.vision.caltech.edu/visipedia/CUB-200.html
# Descomprimir el fichero.
# Descargar también el fichero list.tar.gz, descomprimirlo y guardar los ficheros
# test.txt y train.txt dentro de la carpeta de imágenes anterior. Estos
# dos ficheros contienen la partición en train y test del conjunto de datos.

##### EN CASO DE USAR COLABORATORY
# Sube tanto las imágenes como los ficheros text.txt y train.txt a tu drive.
# Después, ejecuta esta celda y sigue las instrucciones para montar
# tu drive en colaboratory.
from google.colab import drive
drive.mount('/content/drive', force_remount=True)
!rm -rf /content/imagenes
!unzip /content/drive/My\ Drive/Colab\ Notebooks/imagenes -d /content

#########################################################################
################ CARGAR LAS LIBRERÍAS NECESARIAS ########################
#########################################################################

# Importar librerías necesarias
import numpy as np
import keras
import keras.utils as np_utils
from keras.preprocessing.image import load_img

# Importar el optimizador a usar
from keras.optimizers import SGD

# Importar modelos y capas específicas que se van a usar
from keras.models import Sequential, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D, Activation, BatchNormalization, Conv1D

# Importar el modelo ResNet50 y su respectiva función de preprocesamiento.
from keras.applications.resnet import ResNet50, preprocess_input
from keras.preprocessing.image import load_img, img_to_array, ImageDataGenerator

# Importar el optimizador a usar
from keras.optimizers import SGD

# Quitar los warnings
import tensorflow.compat.v1 as tf
tf.logging.set_verbosity(tf.logging.ERROR)

#########################################################################
################## FUNCIÓN PARA LEER LAS IMÁGENES #######################
#########################################################################

# Dado un fichero train.txt o test.txt y el path donde se encuentran los
# ficheros y las imágenes, esta función lee las imágenes especificadas en
# ese fichero y devuelve las imágenes en un vector y sus clases en otro.

def leerImagenes(vec_imagenes, path):
  clases = np.array([img.split('/')[0] for img in vec_imagenes])
  imagenes = np.array([img_to_array(load_img(path + "/" + img,
                                             target_size = (224, 224)))
                       for img in vec_imagenes])
  return imagenes, clases

#########################################################################
############# FUNCIÓN PARA CARGAR EL CONJUNTO DE DATOS ##################
#########################################################################

# Usando la función anterior, y dado el path donde se encuentran las
# imágenes y los archivos "train.txt" y "test.txt", devuelve las imágenes
# y las clases de train y test para usarlas con keras directamente.

def cargarDatos(path):
  # Cargamos los ficheros
  train_images = np.loadtxt(path + "/train.txt", dtype = str)
  test_images = np.loadtxt(path + "/test.txt", dtype = str)

  # Leemos las imágenes con la función anterior
  train, train_clases = leerImagenes(train_images, path)
  test, test_clases = leerImagenes(test_images, path)

  # Pasamos los vectores de las clases a matrices
  # Para ello, primero pasamos las clases a números enteros
  clases_posibles = np.unique(np.copy(train_clases))
  for i in range(len(clases_posibles)):
    train_clases[train_clases == clases_posibles[i]] = i
    test_clases[test_clases == clases_posibles[i]] = i

  # Después, usamos la función to_categorical()
  train_clases = np_utils.to_categorical(train_clases, 200)
  test_clases = np_utils.to_categorical(test_clases, 200)

  # Barajar los datos
  train_perm = np.random.permutation(len(train))
  train = train[train_perm]
  train_clases = train_clases[train_perm]

  test_perm = np.random.permutation(len(test))
  test = test[test_perm]
  test_clases = test_clases[test_perm]

  return train, train_clases, test, test_clases

#########################################################################
######## FUNCIÓN PARA OBTENER EL ACCURACY DEL CONJUNTO DE TEST ##########
#########################################################################

# Esta función devuelve el accuracy de un modelo, definido como el
# porcentaje de etiquetas bien predichas frente al total de etiquetas.
# Como parámetros es necesario pasarle el vector de etiquetas verdaderas
# y el vector de etiquetas predichas, en el formato de keras (matrices
# donde cada etiqueta ocupa una fila, con un 1 en la posición de la clase
# a la que pertenece y 0 en las demás).

def calcularAccuracy(labels, preds):
  labels = np.argmax(labels, axis = 1)
  preds = np.argmax(preds, axis = 1)

  accuracy = sum(labels == preds)/len(labels)

  return accuracy

#########################################################################
## FUNCIÓN PARA PINTAR LA PÉRDIDA Y EL ACCURACY EN TRAIN Y VALIDACIÓN ###
#########################################################################

# Esta función pinta dos gráficas, una con la evolución de la función
# de pérdida en el conjunto de train y en el de validación, y otra
# con la evolución del accuracy en el conjunto de train y en el de
# validación. Es necesario pasarle como parámetro el historial
# del entrenamiento del modelo (lo que devuelven las funciones
# fit() y fit_generator()).

def mostrarEvolucion(hist):
  loss = hist.history['loss']
  val_loss = hist.history['val_loss']
  plt.plot(loss)
  plt.plot(val_loss)
  plt.legend(['Training loss', 'Validation loss'])
  plt.show()

  acc = hist.history['acc']
  val_acc = hist.history['val_acc']
  plt.plot(acc)
  plt.plot(val_acc)
  plt.legend(['Training accuracy', 'Validation accuracy'])
  plt.show()

"""## Usar ResNet50 preentrenada en ImageNet como un extractor de características"""

# Definir un objeto de la clase ImageDataGenerator para train y otro para test
# con sus respectivos argumentos.
# Definir el modelo ResNet50 (preentrenado en ImageNet y sin la última capa).
def modeloAp1():
  model = Sequential()
  model.add(Dense(1024, activation='relu', input_shape=(2048, )))
  model.add(Dense(200, activation='softmax'))
  return model

# Extraer las características las imágenes con el modelo anterior.
def extraerCaracteristicas():
  input_shape=(224, 224, 3)   # Imágenes en color con 3 canales de 224x224 píxeles.
  batch_size = 32             # Tamaño de batch potencia de 2
  epochs = 15                 # Elegimos número de épocas

  print("Leyendo datos\n")
  x_train, y_train, x_test, y_test = cargarDatos("/content/images")

  # Creamos un generador para entrenamiento y otro para test
  #datagen_train = ImageDataGenerator(preprocessing_function = preprocess_input)
  #datagen_test = ImageDataGenerator(preprocessing_function = preprocess_input)

  # Usamos ResNet50 preentrenada en ImageNet sin la última capa
  resnet50 = ResNet50(weights='imagenet', include_top=False, pooling="avg", input_shape=(224, 224, 3))
  resnet50.summary()

  # Extraemos características de las imágenes con el modelo anterior
  print("Extraemos características\n")
  features_train = resnet50.predict_generator(datagen_train.flow(x_train, batch_size=1, shuffle=False), verbose=1, steps=len(x_train))
  features_test = resnet50.predict_generator(datagen_test.flow(x_test, batch_size=1, shuffle=False), verbose=1, steps=len(x_test))

  # Compilamos el modelo
  model = modeloAp1()
  model.summary()
  opt = SGD(lr=lr, decay=1e-6, momentum = 0.9, nesterov=True)
  model.compile(loss = categorical_crossentropy, optimizer=opt, metrics=[acc])

  features_train = ImageDataGenerator(validation_split=0.1)
  weights = model.get_weights()
  model.set_weights(weights)
  model.summary()

  # Entrenamos el modelo
  hist = model.fit(features_train, y_train,
                   batch_size=batch_size,
                   epochs=epochs,
                   verbose=1,
                   validation_split=0.1)
  
  mostrarEvolucion(hist)
  score = model.evaluate_generator(datagen_test.flow(x_test, y_test, batch_siz=1, shuffle=False), steps=len(x_test))
  print("Test loss:", score[0])
  print("Test accuracy:", score[1])

extraerCaracteristicas()

# Las características extraídas en el paso anterior van a ser la entrada
# de un pequeño modelo de dos capas Fully Conected, donde la última será la que
# nos clasifique las clases de Caltech-UCSD (200 clases). De esta forma, es
# como si hubiéramos fijado todos los parámetros de ResNet50 y estuviésemos
# entrenando únicamente las capas añadidas. Definir dicho modelo.
# A completar: definición del modelo, del optimizador y compilación y
# entrenamiento del modelo.
# En la función fit() puedes usar el argumento validation_split


"""## Reentrenar ResNet50 (fine tunning)"""

# Definir un objeto de la clase ImageDataGenerator para train y otro para test
# con sus respectivos argumentos.
# Añadir nuevas capas al final de ResNet50 (recuerda que es una instancia de
# la clase Model).

def modeloAp2(x):
  x = Dense(512, activation='relu')(x)
  x = Dropout(0.6)(x)
  last = Dense(200, activation='softmax')(x)
  return last

# Compilación y entrenamiento del modelo.
def ejercicio3_2(batch_size, epochs):
  input_shape=(224, 224, 3)   # Imágenes en color con 3 canales de 224x224 píxeles.
  batch_size = 32             # Tamaño de batch potencia de 2
  epochs = 15                 # Elegimos número de épocas

  print("Leyendo datos\n")
  x_train, y_train, x_test, y_test = cargarDatos("/content/imagenes")

  # Creamos un generador para entrenamiento y otro para test
  datagen_train = ImageDataGenerator(preprocessing_function = preprocess_input)
  datagen_test = ImageDataGenerator(preprocessing_function = preprocess_input)

  # Usamos ResNet50 preentrenada en ImageNet sin la última capa
  resnet50 = ResNet50(weights='imagenet', include_top=False, pooling="avg", input_shape=(224, 224, 3))

  # Reentrenamos el modelo
  last = modeloAp2(resnet50.output)
  new_model = Model(inputs=resnet50.input, outputs=last)

  # Compilamos el modelo
  print("Compilando el modelo\n")
  opt = SGD(lr=lr, decay=1e-6, momentum=0.9, nesterov=True)
  new_model.compile(loss = categorical_crossentropy, optimizer=opt, metrics=[acc])

  features_train = ImageDataGenerator(validation_split=0.1)
  weights = new_model.get_weights()
  new_model.set_weights(weights)
  new_model.summary()

  # Entrenamos el modelo
  hist = model.fit(features_train, y_train,
                   batch_size=batch_size,
                   epochs=epochs,
                   verbose=1,
                   validation_split=0.1)
  
  mostrarEvolucion(hist)
  score = new_model.evaluate_generator(datagen_test.flow(x_test, y_test, batch_size = 1, shuffle = False), steps = len(x_test))
  print("Test loss:", score[0])
  print("Test accuracy:", score[1])

ejercicio3_2()